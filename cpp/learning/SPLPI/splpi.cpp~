
#include <algorithm>
#include <utility>

#include <boost/math/special_functions/factorials.hpp>
#include <boost/assign/std/vector.hpp>
#include <boost/graph/adjacency_list.hpp>
#include <boost/graph/connected_components.hpp>
#include <boost/graph/strong_components.hpp>

#include "gurobi_c++.h"
#include "cpp/learning/SPLPI/splpi.hpp"
#include "cpp/learning/SPLPI/utils.hpp"
#include "cpp/body_pose/common.hpp"
#include <numeric>
#include <algorithm>
#include <iostream>

#include "andres/graph/graph.hxx"
#include "andres/graph/components.hxx"
#include "andres/graph/minimum-spanning-tree.hxx"


#include "cpp/utils/string_utils.hpp"

using namespace boost::assign;
using namespace std;

typedef andres::graph::Graph<> Graph;

namespace learning
{

namespace splpi
{


SPLPI::SPLPI(unsigned int num_labels_, float norm_size_, body_pose::BodyPoseTypes pose_type_):
                                num_labels(num_labels_),
                                norm_size(norm_size_),
                                pose_type(pose_type_){
  initialize_model();
}

SPLPI::SPLPI(unsigned int num_labels_, float norm_size_,
          body_pose::BodyPoseTypes pose_type_, bool use_single_solution_constraint_):
            num_labels(num_labels_),
            norm_size(norm_size_),
            pose_type(pose_type_),
            use_single_solution_constraint(use_single_solution_constraint_){
  initialize_model();
}

void SPLPI::set_num_labels(unsigned int num_labels_){
  num_labels = num_labels_;
}

bool SPLPI::set_pairwise_displacements(vector<vector<cv::EM> >& displacements){
  pairwise_displacements = displacements;
  return true;
}

cv::EM SPLPI::get_pairwise_displacment(int pIdx, int ppIdx){
  CHECK(pairwise_displacements.size());
  return pairwise_displacements[pIdx][ppIdx];
}

double SPLPI::normalized_unary(int label, Detection d1){

  Mat feat = d1.conf_values.clone();
  Mat mean_mat  =  unary_models[label].mean;
  Mat std_mat   =  unary_models[label].std;
  splpi::normalize_data(feat, feat, mean_mat, std_mat);

  vector<double> probs;
  unary_models[label].model->predict_probability<float>(feat, probs);
  return probs[0];
}


bool SPLPI::set_unaries(std::vector<Detection>& detections){
  x.clear();
  x.resize(detections.size());
  peak_ids.clear();

  unaries = 0;
  int count = 0;

  float min_val = std::numeric_limits<float>::max();
  float max_val = std::numeric_limits<float>::max() * -1;

  // add variables
  for(unsigned int dIdx=0; dIdx<detections.size(); dIdx++){

      if(detections[dIdx].label == 0){
        peak_ids.push_back(dIdx);
      }

      vector<int> labels = detections[dIdx].possible_labels;
      x[dIdx].resize(labels.size());

      for(unsigned int cIdx=0; cIdx<labels.size(); cIdx++){
        int l = labels[cIdx];
        string x_name = boost::str(boost::format("x_%1%_%2%") %dIdx %l);
//        double prob = static_cast<double>(detections[dIdx].conf_values.at<float>(0,l));
        double prob = normalized_unary(l, detections[dIdx]);

        x[dIdx][cIdx] = model->addVar(0.0, 1.0, NULL , GRB_BINARY, x_name);
        double coef_val = log((1-prob)/(prob));

        unaries += coef_val*x[dIdx][cIdx];
        max_val = std::max(max_val, (float)coef_val);
        min_val = std::min(min_val, (float)coef_val);
      }
  }
  LOG(INFO)<<"Unaries: min_val=<<"<<min_val<<"\t max_val="<<max_val;
  return true;
}



double SPLPI::same_class_binary(int label, Detection d1,  Detection d2){
  cv::Mat feat = compute_spatial_relation_feature(d1.loc,d2.loc, norm_size);

  Mat mean_mat  =  same_class_binary_models[label].mean;
  Mat std_mat   =  same_class_binary_models[label].std;
  splpi::normalize_data(feat, feat, mean_mat, std_mat);

  vector<double> probs;
  same_class_binary_models[label].model->predict_probability<float>(feat, probs);
  return probs[0];
}

double SPLPI::diff_class_binary(int label1, Detection d1, int label2, Detection d2){
  cv::Point p1      = d1.loc;
  cv::Point p2      = d2.loc;
  cv::Point offset  = p2 - p1;

  cv::Mat feat;
  extract_pairwise_feat_from_offset(offset, feat);
  hconcat(feat, d1.conf_values, feat);
  hconcat(feat, d2.conf_values, feat);

  Mat mean_mat  =  diff_class_binary_models[label1][label2].mean;
  Mat std_mat   =  diff_class_binary_models[label1][label2].std;
  splpi::normalize_data(feat, feat, mean_mat, std_mat);

  vector<double> probs;
  diff_class_binary_models[label1][label2].model->predict_probability<float>(feat, probs);
  return probs[0];
}

bool SPLPI::set_binaries(std::vector<Detection>& detections){

  CHECK(detections.size());
  CHECK(model);
  CHECK(same_class_binary_models.size());

  y.clear();
  z.clear();

  binaries = 0;
  unsigned int num_det = detections.size();
  y.resize(num_det);
  z.resize(num_det);

  float min_val = numeric_limits<float>::max();
  float max_val = numeric_limits<float>::max() * -1;

  for(unsigned int dIdx = 0; dIdx<num_det-1; dIdx++){
    y[dIdx].resize(num_det);
    z[dIdx].resize(num_det);

    for(unsigned int ddIdx = dIdx+1; ddIdx<num_det; ddIdx++){

      vector<int>& c_labels = detections[dIdx].possible_labels;
      z[dIdx][ddIdx].resize(c_labels.size());

      cout<<"\n==============================================================\n"<<dIdx<<"\t"<<ddIdx<<"\n";
      std::string y_name = boost::str(boost::format("y_%1%_%2%") %dIdx %ddIdx);
      y[dIdx][ddIdx] = model->addVar(0.0, 1.0, NULL, GRB_BINARY);


      for(unsigned int cIdx = 0; cIdx < c_labels.size(); cIdx++){
        vector<int>& cc_labels = detections[ddIdx].possible_labels;
        z[dIdx][ddIdx][cIdx].resize(cc_labels.size());
        int c  = c_labels[cIdx];

        for(unsigned int ccIdx=0; ccIdx < cc_labels.size(); ccIdx++){

          int cc = cc_labels[ccIdx];
          double prob = 0;

          if(c == cc){
           prob = same_class_binary(c, detections[dIdx], detections[ddIdx]);
          }
          else{
            prob = diff_class_binary(c, detections[dIdx], cc, detections[ddIdx]);
          }

          prob = min(prob, 0.9999);
          prob = max(prob, 0.0001);
          double coef_val  = log((1-prob)/(prob));

//          if(detections[dIdx].label == 0 && detections[ddIdx].label == 0){
//           coef_val = numeric_limits<double>::max();
//          }

          max_val   = max(max_val, (float)coef_val);
          min_val   = min(min_val, (float)coef_val);

          cout<<prob<<",";

          z[dIdx][ddIdx][cIdx][ccIdx] = model->addVar(0.0, 1.0, NULL, GRB_BINARY);
          binaries += coef_val * z[dIdx][ddIdx][cIdx][ccIdx];
        }
        cout<<endl;
      }
    }
    cout<<"\n////////////////////////////////////////////////////////////////////\n";
  }
  LOG(INFO)<<"Binaries: min_val="<<min_val<<"\t max_val="<<max_val;
  return true;
}

bool SPLPI::add_contraints()
{
  // constraint-1
  CHECK(x.size());
  for(size_t dIdx=0; dIdx<x.size(); dIdx++){
    if(x[dIdx].size() > 1){
      GRBLinExpr lhs = 0;
      for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
        lhs += x[dIdx][cIdx];
      }
      model->addConstr(lhs, GRB_LESS_EQUAL, 1);
    }
  }
//
  // constraint-2
  CHECK(y.size());
  for(size_t dIdx=0; dIdx<x.size()-1; dIdx++){
    for(size_t ddIdx=dIdx+1; ddIdx < x.size(); ddIdx++){
      GRBLinExpr rhs1 = 0, rhs2=0;
      for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
        rhs1 += x[dIdx][cIdx];
      }
      for(size_t cIdx=0; cIdx<x[ddIdx].size(); cIdx++){
        rhs2 += x[ddIdx][cIdx];
      }
      model->addConstr(y[dIdx][ddIdx], GRB_LESS_EQUAL, rhs1);
      model->addConstr(y[dIdx][ddIdx], GRB_LESS_EQUAL, rhs2);
    }
  }

  for(size_t dIdx=0; dIdx< x.size(); dIdx++){
    GRBLinExpr lhs = 0;
    GRBLinExpr rhs = 0;
    for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
      rhs += x[dIdx][cIdx];
    }
    for(size_t ddIdx=0; ddIdx< x.size(); ddIdx++){
        if(dIdx == ddIdx) {continue;}

        if(dIdx < ddIdx)
          lhs += y[dIdx][ddIdx];
        else
          lhs += y[ddIdx][dIdx];
    }
    model->addConstr(lhs, GRB_GREATER_EQUAL, rhs);
  }

  // constraint-3 (eqt-8 from the original paper)
  for(size_t dIdx=0; dIdx< x.size()-2; dIdx++){
    for(size_t ddIdx=dIdx+1; ddIdx< x.size()-1; ddIdx++){
      for(size_t dddIdx=ddIdx+1; dddIdx< x.size(); dddIdx++){
        GRBLinExpr lhs_1 = y[dIdx][ddIdx] + y[ddIdx][dddIdx] - y[dIdx][dddIdx];
        GRBLinExpr lhs_2 = y[dIdx][ddIdx] - y[ddIdx][dddIdx] + y[dIdx][dddIdx];
        GRBLinExpr lhs_3 = - y[dIdx][ddIdx] + y[ddIdx][dddIdx] + y[dIdx][dddIdx];
        model->addConstr(lhs_1, GRB_LESS_EQUAL, 1);
        model->addConstr(lhs_2, GRB_LESS_EQUAL, 1);
        model->addConstr(lhs_3, GRB_LESS_EQUAL, 1);
      }
    }
  }

  // constraint-4
  for(size_t dIdx=0; dIdx<x.size()-1; dIdx++){
    for(size_t ddIdx=dIdx+1; ddIdx < x.size(); ddIdx++){
      for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
        for(size_t ccIdx=0; ccIdx<x[ddIdx].size(); ccIdx++){

          GRBLinExpr lhs2 = x[dIdx][cIdx] + x[ddIdx][ccIdx] + y[dIdx][ddIdx] - 2;
          GRBLinExpr rhs2 = z[dIdx][ddIdx][cIdx][ccIdx];
          model->addConstr(lhs2, GRB_LESS_EQUAL, rhs2);

          GRBLinExpr lhs = z[dIdx][ddIdx][cIdx][ccIdx];
          model->addConstr(lhs, GRB_LESS_EQUAL, x[dIdx][cIdx]);
          model->addConstr(lhs, GRB_LESS_EQUAL, x[ddIdx][ccIdx]);
          model->addConstr(lhs, GRB_LESS_EQUAL, y[dIdx][ddIdx]);

          // if only single solution is desired (eqt-5 of the original paper)
          if(use_single_solution_constraint){
            GRBLinExpr lhs3 = x[dIdx][cIdx] + x[ddIdx][ccIdx] - 1;
            GRBLinExpr rhs3 = y[dIdx][ddIdx];
            model->addConstr(lhs3, GRB_LESS_EQUAL, rhs3);
          }
        }
      }
    }
  }

  vector<int> peaks = peak_ids;
  sort(peaks.begin(), peaks.end());

  vector<int> dIdxs(x.size());
  std::iota(dIdxs.begin(), dIdxs.end(), 0);

  vector<int> diff;
  set_difference(dIdxs.begin(), dIdxs.end(), peaks.begin(), peaks.end(),
                  inserter(diff, diff.begin()));


  //   each detection should be connected to at least one head
//  for(size_t d=0; d<diff.size(); d++){
//    int dIdx = diff[d];
//    GRBLinExpr lhs = 0;
//    for(size_t pIdx=0; pIdx<peaks.size(); pIdx++){
//      int pid = peaks[pIdx];
//      if(pid == dIdx){
//        continue;
//      }
//      else if(pid < dIdx){
//        lhs += y[pid][dIdx];
//      }
//      else{
//        lhs += y[dIdx][pid];
//      }
//    }
//    for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
//      model->addConstr(lhs, GRB_EQUAL, x[dIdx][cIdx]);
//    }
//  }

  return true;
}

void SPLPI::set_single_solution_contraint()
{
  use_single_solution_constraint = true;
}

bool SPLPI::set_objective_function(std::vector<Detection>& detections)
{
  reset_model();

  LOG(INFO)<<"Setting Unaries";
  set_unaries(detections);

  LOG(INFO)<<"Setting Binaries";
  set_binaries(detections);

  model->update();
  LOG(INFO)<<"DONE";

  objective = unaries + binaries;
  LOG(INFO)<<"Setting Objective Function";
  try{
    model->setObjective(objective, GRB_MINIMIZE);
//    LOG(INFO)<<"Setting Objective Function";
    model->update();
  }
  catch (const GRBException &exc)
  {
    std::cerr << exc.getErrorCode();
    exit(exc.getErrorCode());
  }

  LOG(INFO)<<"Adding Constraints";
  add_contraints();

  //model->getEnv().set(GRB_DoubleParam_MIPGap, 0.01);
  model->getEnv().set(GRB_IntParam_Threads, 12);
//  model->getEnv().set(GRB_DoubleParam_TimeLimit, 300);
  model->update();

  return true;
}

bool SPLPI::reset_model(){
  if(model){
    delete this->model;
    this->model = new GRBModel(*env);
    this->model->getEnv().set(GRB_IntParam_LogToConsole, 0);
    return true;
  }
  else{
    return false;
  }
}

bool SPLPI::initialize_model(){
  this->env = new GRBEnv();
  this->model = new GRBModel(*env);
  return true;
}

int SPLPI::connected_component(vector<long unsigned int>& labels)
{
  labels.clear();
  Graph graph(y.size());
  for(size_t dIdx=0; dIdx<y.size(); dIdx++){
    for(size_t ddIdx=dIdx+1; ddIdx<y[dIdx].size(); ddIdx++){
      bool status = y[dIdx][ddIdx].get(GRB_DoubleAttr_X);
      if(status){
        graph.insertEdge(dIdx, ddIdx);
      }
    }
  }

  andres::graph::ComponentsBySearch<Graph> c_components;
  int num = c_components.build(graph);
  labels = c_components.labels_;

  vector<Graph> graphs(num, y.size());
  vector<vector<float> > weights(num);

  return num;
}

int SPLPI::optimize(std::vector<Detection>& detections, vector<vector<Point> >& minimas)
{
  vector<vector<int> > mst_parents;
  return optimize(detections, minimas, mst_parents);
}


int SPLPI::optimize(std::vector<Detection>& detections, vector<vector<Point> >& minimas, vector<vector<int> > &mst_parents)
{
  set_objective_function(detections);
  model->optimize();
  double obj_val = model->get(GRB_DoubleAttr_ObjVal);
//  LOG(INFO)<<"Final objective value = "<<obj_val;
//  for(unsigned int dIdx=0; dIdx<x.size(); dIdx++){
//      cout<<dIdx<<":\t"<<x[dIdx].get(GRB_DoubleAttr_X)<<"("<<x[dIdx].get(GRB_DoubleAttr_Obj)<<")\t Label: "<<detections[dIdx].label<<endl;
//  }
//  for(size_t dIdx=0; dIdx<y.size(); dIdx++){
//    for(size_t ddIdx=dIdx+1; ddIdx<y[dIdx].size(); ddIdx++){
//      cout<<"("<<dIdx<<","<<ddIdx<<") = "<<y[dIdx][ddIdx].get(GRB_DoubleAttr_X)<<"("<<y[dIdx][ddIdx].get(GRB_DoubleAttr_Obj)<<")\n";
//    }
//    cout<<endl;
//  }

  vector<long unsigned int> person_ids;
  int num_persons = connected_component(person_ids);

  vector<vector<Point> >   estimates(num_persons);
  vector<vector<double> > obj_values(num_persons);
  vector<map<int,pair<int, int> > >  d_ids(num_persons);

  /// resize the vectors
  for(size_t pIdx=0; pIdx<num_persons; pIdx++){
    estimates[pIdx].resize(num_labels, Point(-1,-1));
    obj_values[pIdx].resize(num_labels, std::numeric_limits<double>::max());
  }

  /// get the detections for each person and form the pose
  /// amongst the clustered annotations, select the one
  /// with the highest unary value
  CHECK_EQ(detections.size(), person_ids.size());
  for(size_t dIdx=0; dIdx<x.size(); dIdx++){
    for(size_t cIdx=0; cIdx<x[dIdx].size(); cIdx++){
      if(x[dIdx][cIdx].get(GRB_DoubleAttr_X)){
        int pid = person_ids[dIdx];
        int label = detections[dIdx].possible_labels[cIdx];
        double val = x[dIdx][cIdx].get(GRB_DoubleAttr_Obj);
        if(val < obj_values[pid][label]){
          obj_values[pid][label] =  val;
          estimates[pid][label]  =  detections[dIdx].loc;
          d_ids[pid][label] = pair<int, int>(dIdx, cIdx);
        }
      }
    }
  }

  vector<map<int,pair<int, int> > >  valid_d_ids;

  /// remove empty connected components
  for(size_t pIdx=0; pIdx<estimates.size(); pIdx++){
    bool valid = false;
    for(size_t dIdx=0; dIdx<estimates[pIdx].size(); dIdx++){
      Point pt = estimates[pIdx][dIdx];
      if(pt.x >= 0 && pt.y >= 0){
        valid = true;
      }
    }
    if(valid){
      valid_d_ids.push_back(d_ids[pIdx]);
      minimas.push_back(estimates[pIdx]);
    }
  }

  d_ids = valid_d_ids;
  num_persons = valid_d_ids.size();
  CHECK_EQ(num_persons, minimas.size());


  mst_parents.clear();
  mst_parents.resize(num_persons);
  /// get the minimum spanning tree for each person
  for(size_t pIdx=0; pIdx<num_persons;pIdx++){
//    LOG(INFO)<<::utils::VectorToString(minimas[pIdx]);
    Graph graph(d_ids[pIdx].size());
    vector<float> weights;

    size_t d_count = 0;
    for(auto const dIt:d_ids[pIdx]){
      size_t dd_count = 0;
      for(auto const ddIt:d_ids[pIdx]){
        if(d_count == dd_count) {continue;}
        pair<int, int> d  = dIt.second;
        pair<int, int> dd = ddIt.second;
        int dIdx  = d.first;
        int ddIdx = dd.first;
        int cIdx  = d.second;
        int ccIdx = dd.second;

        graph.insertEdge(d_count, dd_count);

        float weight = 0;
        if(dIdx < ddIdx){
          weight = z[dIdx][ddIdx][cIdx][ccIdx].get(GRB_DoubleAttr_Obj);
        }
        else{
          weight = z[ddIdx][dIdx][ccIdx][cIdx].get(GRB_DoubleAttr_Obj);
        }
        weights.push_back(weight);
        dd_count++;
      }
      d_count++;
    }

    /// MST
    vector<size_t> pred(graph.numberOfVertices());
    auto mst_value = findMSTPrim(graph, weights, andres::graph::DefaultSubgraphMask<>(), 0, pred);
//    LOG(INFO)<<"MST value = "<<mst_value;

    /// formulate the tree structure and constalations
    map<size_t, vector<size_t> > tree_struct;
    int root_node = 0;
    for(size_t p=1; p<pred.size(); p++){
//      LOG(INFO)<<graph.vertexOfEdge(pred[p],0)<<"\t"<<graph.vertexOfEdge(pred[p],1);
      tree_struct[graph.vertexOfEdge(pred[p],0)].push_back(graph.vertexOfEdge(pred[p], 1));
      tree_struct[graph.vertexOfEdge(pred[p],1)].push_back(graph.vertexOfEdge(pred[p], 0));
    }
//
//    for(auto const it:tree_struct){
//      LOG(INFO)<<it.first<<":\t"<<::utils::VectorToString(it.second);
//    }

    vector<size_t> parents(graph.numberOfVertices());
    vector<bool> visited(graph.numberOfVertices(), false);
    queue<size_t> Q;
    Q.push(root_node);
    while(!Q.empty()){
      size_t current = Q.front();
      visited[current] = true;
      Q.pop();
      for(size_t n=0; n<tree_struct[current].size(); n++){
        int vid = tree_struct[current][n];
        if(!visited[vid]){
          parents[vid] = current;
          Q.push(vid);
          visited[vid] = true;
        }
      }
    }

    /// map the parents id to original ids
    vector<int> mapped_parents(num_labels, -1);
    d_count=0;
    for(auto const dIt:d_ids[pIdx]){
      int d_id = dIt.first;
      map<int,pair<int,int> >::iterator it = d_ids[pIdx].begin();
      advance( it, parents[d_count]);
      mapped_parents[d_id] = it->first;
      d_count++;
    }

//    LOG(INFO)<<::utils::VectorToString(parents);
//    LOG(INFO)<<::utils::VectorToString(mapped_parents);
    mst_parents[pIdx] = mapped_parents;
  }

  CHECK_EQ(minimas.size(), mst_parents.size());

  return minimas.size();
}

bool  SPLPI::set_same_class_binary_models(std::vector<splpi::BinaryModel>& models){
  same_class_binary_models = models;
  return true;
}

bool  SPLPI::set_diff_class_binary_models(std::vector<std::vector<splpi::BinaryModel> >& models){
  diff_class_binary_models = models;
  return true;
}

bool  SPLPI::set_unary_models(std::vector<splpi::BinaryModel> & models){
  unary_models = models;
  return true;
}

bool SPLPI::save_same_class_binary_models(std::string save_path)
{
  try{
    std::ofstream ofs(save_path.c_str());
    if(ofs==0){
      LOG(INFO)<<"Error: Cannot open the given path to save same class binary models.";
      return false;
    }
    boost::archive::text_oarchive oa(ofs);
    oa<<same_class_binary_models;
    ofs.flush();
    ofs.close();
    LOG(INFO)<<"Models saved at :"<<save_path;
    return true;
  }
  catch(boost::archive::archive_exception& ex){
    LOG(INFO)<<"Archive exception during deserialization:" <<std::endl;
    LOG(INFO)<< ex.what() << std::endl;
    LOG(INFO)<< "it was file: "<<save_path;
  }
  return true;
}


bool SPLPI::save_unary_models(std::string save_path)
{
  try{
    std::ofstream ofs(save_path.c_str());
    if(ofs==0){
      LOG(INFO)<<"Error: Cannot open the given path to save same class binary models.";
      return false;
    }
    boost::archive::text_oarchive oa(ofs);
    oa<<unary_models;
    ofs.flush();
    ofs.close();
    LOG(INFO)<<"Models saved at :"<<save_path;
    return true;
  }
  catch(boost::archive::archive_exception& ex){
    LOG(INFO)<<"Archive exception during deserialization:" <<std::endl;
    LOG(INFO)<< ex.what() << std::endl;
    LOG(INFO)<< "it was file: "<<save_path;
  }
  return true;
}


bool SPLPI::load_unary_models(std::string path)
{
    std::ifstream ifs(path.c_str());

    if(!ifs){
      LOG(INFO)<<"file not found.";
    }
    else{
      try{
        boost::archive::text_iarchive ia(ifs);
        ia>>unary_models;
        CHECK(unary_models.size());
        LOG(INFO)<<"Unary models loaded";

        for(unsigned int i=0; i<unary_models.size(); i++){
          string path = unary_models[i].path;
          unary_models[i].model->read_from_text(path.c_str());
        }

        return true;
      }
      catch(boost::archive::archive_exception& ex){
        LOG(INFO)<<"Reload Tree: Archive exception during deserializiation: "
              <<ex.what();
          LOG(INFO)<<"not able to load unary models from: "<<path;
      }
    }
    return false;
}


bool SPLPI::load_same_class_binary_models(std::string path)
{
    std::ifstream ifs(path.c_str());

    if(!ifs){
      LOG(INFO)<<"file not found.";
    }
    else{
      try{
        boost::archive::text_iarchive ia(ifs);
        ia>>same_class_binary_models;
        CHECK(same_class_binary_models.size());
        LOG(INFO)<<"Same class models loaded";

        for(unsigned int i=0; i<same_class_binary_models.size(); i++){
          string path = same_class_binary_models[i].path;
          same_class_binary_models[i].model->read_from_text(path.c_str());
        }

        return true;
      }
      catch(boost::archive::archive_exception& ex){
        LOG(INFO)<<"Reload Tree: Archive exception during deserializiation: "
              <<ex.what();
          LOG(INFO)<<"not able to load same class binary models from: "<<path;
      }
    }
    return false;
}


bool SPLPI::save_diff_class_binary_models(std::string save_path)
{
  try{
    std::ofstream ofs(save_path.c_str());
    if(ofs==0){
      LOG(INFO)<<"Error: Cannot open the given path to save diff class binary models.";
      return false;
    }
    boost::archive::text_oarchive oa(ofs);
    oa<<diff_class_binary_models;
    ofs.flush();
    ofs.close();
    LOG(INFO)<<"Models saved at :"<<save_path;
    return true;
  }
  catch(boost::archive::archive_exception& ex){
    LOG(INFO)<<"Archive exception during deserialization:" <<std::endl;
    LOG(INFO)<< ex.what() << std::endl;
    LOG(INFO)<< "it was file: "<<save_path;
  }
  return true;
}

bool SPLPI::load_diff_class_binary_models(std::string path)
{
    std::ifstream ifs(path.c_str());

    if(!ifs){
      LOG(INFO)<<"file not found.";
    }
    else{
      try{
        boost::archive::text_iarchive ia(ifs);
        ia>>diff_class_binary_models;
        LOG(INFO)<<"Diff class models loaded";

        vector<vector<BinaryModel> >& models = diff_class_binary_models;
        for(unsigned int i=0; i<models.size(); i++){
          for(unsigned int j=0; j<models[i].size(); j++){
            if(i == j){
              continue;
            }
            string path = models[i][j].path;
            CHECK(path.c_str());
            models[i][j].model->read_from_text(path.c_str());
          }
        }
        return true;
      }
      catch(boost::archive::archive_exception& ex){
        LOG(INFO)<<"Reload Tree: Archive exception during deserializiation: "
              <<ex.what();
          LOG(INFO)<<"not able to load poses from: "<<path;
      }
    }
    return false;
}

float SPLPI::evaluate_pose(vector<Detection>& detections, vector<int> parents)
{
  float value = 0;
  for(size_t dIdx=0; dIdx<detections.size()-1; dIdx++){
    for(size_t ddIdx=dIdx+1; ddIdx<detections.size(); ddIdx++){

      if(!is_valid(detections[dIdx].loc) || !is_valid(detections[ddIdx].loc))
        continue;

      float part_prob   = static_cast<float>(detections[dIdx].conf_values.at<float>(0,dIdx));
      float parent_prob = static_cast<float>(detections[ddIdx].conf_values.at<float>(0,ddIdx));

      float binary_val  = diff_class_binary(dIdx, detections[dIdx], ddIdx, detections[ddIdx]);
      value += log((1-part_prob)/(part_prob)) + log((1-parent_prob)/(parent_prob))  + log((1-binary_val)/(binary_val)) ;
    }
  }
  return value;
}


vector<int> get_children_ids(int part_id, vector<int> parents) {
  vector<int> children;
  for(int i=0; i < parents.size(); i++) {
    int parent_id = parents[i];
    if(parent_id == part_id &&
       parent_id != i &&
       parent_id >= 0 ){
      children.push_back(i);
    }
  }
  return children;
}

float SPLPI::inference_dp(const vector<Mat_<float> >& appearance_scores,
                  const vector<Point_<int> >& pose,
                  vector<Mat_<float> >& scores,
                  vector<Mat_<int> >& score_src_x,
                  vector<Mat_<int> >& score_src_y,
                  body_pose::BodyPoseTypes pose_type,
                  std::vector<int> parents,
                  int part_id,
                  int radius)
{
  vector<int> child_ids = get_children_ids(part_id, parents);
  Mat_<float> score_tmp = appearance_scores[part_id+1].clone(); /// +1 since we have a background class at 0
  for( int i = 0; i < child_ids.size(); i++){
    int child_id = child_ids[i];
    inference_dp(appearance_scores, pose, scores, score_src_x, score_src_y, pose_type, parents,child_id, radius);
    add(score_tmp, scores[child_id], score_tmp);
  }

  int parent_id = parents[part_id];
  CHECK_GE(parent_id, 0);

  if(part_id == parent_id){ // is root
    scores[part_id] = score_tmp.clone();
  }
  else{
    Point part_loc = pose[part_id];
    int part_x = max(0, part_loc.x - radius);
    int part_y = max(0, part_loc.y - radius);
    int part_max_x = min(part_x+2*radius, appearance_scores[0].cols);
    int part_max_y = min(part_y+2*radius, appearance_scores[0].rows);

    Point parent_loc  = pose[parent_id];
    int parent_x     = max(0, parent_loc.x - radius);
    int parent_y     = max(0, parent_loc.y - radius);
    int parent_max_x = min(parent_x+2*radius, appearance_scores[0].cols);
    int parent_max_y = min(parent_y+2*radius, appearance_scores[0].rows);

    for(int i=parent_y; i<parent_max_y; i++){
      for(int j=parent_x; j<parent_max_x; j++){

        Detection parent;
        parent.loc = Point(j, i);
        parent.score = appearance_scores[parent_id+1].at<float>(parent.loc);
        Mat parent_probs = Mat::zeros(1, appearance_scores.size(), CV_32F);
        for(unsigned int p=0; p < appearance_scores.size(); p++){
          parent_probs.at<float>(0,p) = appearance_scores[p].at<float>(parent.loc);
        }
        parent.conf_values = parent_probs.clone();


        float max_prob = numeric_limits<float>::min();
        int src_x = 0;
        int src_y = 0;
        for(int k=part_y; k<part_max_y; k++){
          for(int l=part_x; l<part_max_x; l++){
            Detection part;
            part.loc    = Point(l, k);
            part.score  = appearance_scores[part_id+1].at<float>(part.loc);
            Mat part_probs = Mat::zeros(1, appearance_scores.size(), CV_32F);
            for(unsigned int p=0; p < appearance_scores.size(); p++){
              part_probs.at<float>(0,p) = appearance_scores[p].at<float>(part.loc);
            }
            part.conf_values = part_probs.clone();

            float binary = static_cast<float>(diff_class_binary(part_id, part, parent_id, parent));
            float prob = score_tmp.at<float>(part.loc) + binary;
            if(prob > max_prob){
              max_prob = prob;
              src_x = l;
              src_y = k;
            }
          }
        }

        scores[part_id].at<float>(parent_loc) = max_prob;
        score_src_x[part_id].at<int>(parent_loc) = src_x;
        score_src_y[part_id].at<int>(parent_loc) = src_y;
      }
    }
  }
}

void compute_arg_min( vector<Point_<int> >& max_locations,
                       vector<Mat_<float> >& scores,
                       vector<Mat_<int> >& score_src_x,
                       vector<Mat_<int> >& score_src_y,
                       int part_id,
                       vector<int>& parents)
{

  CHECK_NOTNULL(scores[part_id].data);
  CHECK_EQ(max_locations.size(), scores.size());

  // the anker point is the location of the parent
  // and for the root the anker point is the maximum of the score mat
  Point_<int> max_loc;
  if(part_id != parents[part_id] && parents[part_id] >= 0) { // has parents
    Point anker;
    anker = max_locations[ parents[part_id] ];
    CHECK_NE(anker.x, -1);
    max_loc.x = score_src_x[part_id](anker);
    max_loc.y = score_src_y[part_id](anker);
  }else{
    minMaxLoc(scores[part_id], 0, 0, 0, &max_loc);
    CHECK_NE(max_loc.x, -1);
  }

  max_locations[part_id] = max_loc;

  // recursive call
  vector<int> child_ids = get_children_ids(part_id, parents);
  for(int i=0; i < child_ids.size(); i++) {
    compute_arg_min( max_locations, scores, score_src_x, score_src_y, child_ids[i], parents);
  }
}

// refinement with learned binaries
float SPLPI::refine_pose(const vector<Mat_<float> >& appearance_scores,
    const vector<Point_<int> >& pose,
    vector<Point_<int> >& refined_pose,
    body_pose::BodyPoseTypes pose_type,
    std::vector<int> parents,
    int radius) {

  vector<int> visible_parts;
  for(size_t i=0; i<pose.size(); i++){
    if(pose[i].x >= 0 && pose[i].y >= 0){
      visible_parts.push_back(i);
    }
    else{
      parents[i] = -1;
    }
  }

  if(visible_parts.size()<=1)
    return 0;

  int root = 0;
  for(size_t i=0; i<visible_parts.size(); i++){
    int part_id = visible_parts[i];
    int parent_id = parents[part_id];

    CHECK_NE(parent_id, -1);

    if(part_id == parent_id){
      root = part_id;
      break;
    }
  }

  vector< Mat_<float> > scores((int)pose_type);
  vector< Mat_<int> >   score_src_x((int)pose_type);
  vector< Mat_<int> >   score_src_y((int)pose_type);

  for(size_t i=0; i<scores.size(); i++){
    scores[i]      = Mat::zeros(appearance_scores[i].size(), CV_32F);
    score_src_x[i] = Mat::zeros(appearance_scores[i].size(), CV_32S);
    score_src_y[i] = Mat::zeros(appearance_scores[i].size(), CV_32S);
  }
  inference_dp(appearance_scores, pose, scores, score_src_x, score_src_y, pose_type, parents, root, radius);

  // Compute argmin
  compute_arg_min( refined_pose, scores, score_src_x, score_src_y, root, parents);
}


// destructor
SPLPI::~SPLPI()
{
  delete model;
  delete env;
}

}

}
